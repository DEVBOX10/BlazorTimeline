<div class="timeline-item">
    <div class="timeline-icon">
        @if (IconContent != null)
        {
            @IconContent
        }
        else
        {
            <img src="./default_icon.svg" alt="Default timeline icon" />
        }
    </div>
    <div class="timeline-content @(Position == ItemPosition.Right ? "right" : "")">
        <div class="item-title">
            <h2>@Title</h2>
            <span><i>@Time</i></span>
        </div>
        <p>
            @ChildContent
        </p>
        @if (!string.IsNullOrEmpty(ButtonText))
        {
            <a href="@Link" class="timeline-button">@ButtonText</a>
        }
    </div>
</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public RenderFragment IconContent { get; set; }

    /// <summary>
    /// Title for timeline item
    /// </summary>
    [Parameter]
    public string Title { get; set; }
   
    [Parameter]
    public string Time { get; set; }
    
    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public string Link { get; set; }

    [Parameter]
    public ItemPosition Position { get; set; }

    [CascadingParameter(Name = nameof(Timeline))]
    public Timeline Timeline { get; set; }
    
    protected override void OnInitialized()
    {
        if (Timeline == null)
            throw new ArgumentNullException(nameof(Timeline),"Must be used within Timeline");
        Timeline.AddTimelineItem(this);
    }

    public override Task SetParametersAsync(ParameterView parameters) {
        Position = parameters.GetValueOrDefault<ItemPosition>(nameof(Position));
        return base.SetParametersAsync(parameters);
    }

}